

* Questions
** What types to support and how should they look?
*** Atomic Types
**** integer or int 
- Numbers without decimals
- `class' of these numbers is "integer" 
- Example: 
  1. 12L
  2. -23L
**** numeric or number or num
- Decimal numbers or numbers without an L suffix
- `class' of these numbers is "numeric"
- Example:
  1. 12.0
  2. -3.0
  3. 0.0
  4. 12
  5. -13
  6. 0
**** logical or boolean or bool
- boolean values
- `class' of these values is "logical"
- Example:
  1. TRUE
  2. FALSE
  3. T
  4. F
**** 

* Meetings
** 1st June 2016
*** Discussion focused on-
- Whether to use metaprogramming approach or to modify the parser itself.
  We decided to modify the parser because it is cleaner and we were not
  sure if metaprogramming would work.
- What types to support?
  To begin with, we will support basic nonparametric types, numeric,
  boolean etc. as described by R language. We will use the `Function'
  type for functions.
- What should be the syntax for types?
  We decided to use '::' to specify types. R already uses ':', so using
  '::' seems more appropriate.
- What would be the next step after adding types?
  Once we have a mechanism (rudimentary) to annotate code with types, we
  can use existing R tools to automatically annotate large codebases,
  based on the type of values being passed to functions in test cases.
*** TODO Modify parser to parse basic non parametric types.          :aviral:
DEADLINE: <2016-06-06 Mon>
1. Use :: for specifying types
2. Support basic [[https://cran.r-project.org/doc/manuals/r-release/R-lang.html][R types]]
** 
